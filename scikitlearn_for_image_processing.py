# -*- coding: utf-8 -*-
"""scikit_image.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18mdmZVjouDffWnncnDailYl_kdLarHyC
"""

from skimage import data, io, filters

image = data.coins()
edges = filters.sobel(image)
io.imshow(edges)
io.show()

from skimage import data, filters, color
from skimage.morphology import disk
import numpy as np

l = data.coins()
noisy = l + 0.4 * l.std() * np.random.random(l.shape)
gaussian_denoised = filters.gaussian(noisy, sigma=2)

from google.colab.patches import cv2_imshow
cv2_imshow(gaussian_denoised)

import matplotlib.pyplot as plt
from skimage import data
from skimage.filters import threshold_otsu

image = data.camera()
thresh = threshold_otsu(image)
binary = image > thresh

fig, axes = plt.subplots(ncols = 3, figsize=(8, 2.5))
ax = axes.ravel()
ax[0] = plt.subplot(1,3,1)
ax[1] = plt.subplot(1,3,2)
ax[2] = plt.subplot(1,3,3,sharex=ax[0], sharey=ax[0])

ax[0].imshow(image, cmap=plt.cm.gray)
ax[0].set_title('Original')
ax[0].axis('off')

ax[1].hist(image.ravel(), bins=256)
ax[1].set_title('Histogram')
ax[1].axvline(thresh, color='r')

ax[2].imshow(binary, cmap=plt.cm.gray)
ax[2].set_title('Thresholded')
ax[2].axis('off')

plt.show()

import matplotlib.pyplot as plt

from skimage import data
from skimage import exposure
from skimage.transform import match_histograms

ref = data.coffee()
img = data.chelsea()

matched = match_histograms(img, ref, multichannel=True)

fig, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3, figsize=(8,3), sharex=True,
                                   sharey=True)
for aa in (ax1, ax2, ax3):
  aa.set_axis_off()

ax1.imshow(img)
ax1.set_title('Source')
ax2.imshow(ref)
ax2.set_title('Reference')
ax3.imshow(matched)
ax3.set_title('Matched')

plt.tight_layout()
plt.show()

fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(8,8))

for i, img in enumerate((img, ref, matched)) :
  for c, c_color in enumerate(('red', 'green', 'blue')):
    img_hist, bins = exposure.histogram(img[..., c], source_range='dtype')
    axes[c, i].plot(bins, img_hist/img_hist.max())
    img_cdf, bins = exposure.cumulative_distribution(img[..., c])
    axes[c, i].plot(bins, img_cdf)
    axes[c, 0].set_ylabel(c_color)
    
axes[0,0].set_title('Source')
axes[0,1].set_title('Reference')
axes[0,2].set_title('Matched')

plt.tight_layout()
plt.show()

from skimage.feature import canny
from skimage import data

coins = data.coins()

edges = canny(coins)

fig, ax = plt.subplots(figsize=(4,3))
ax.imshow(edges, cmap=plt.cm.gray)
ax.set_title('Canny detector')
ax.axis('off')

from scipy import ndimage as ndi

fill_coins = ndi.binary_fill_holes(edges)

fig, ax = plt.subplots(figsize=(4,3))
ax.imshow(fill_coins, cmap=plt.cm.gray)
ax.set_title('filling the holes')
ax.axis('off')

